# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Domain/BlogPost.php'
            - '../src/Domain/User.php'
            - '../src/Kernel.php'

    App\Infrastructure\Command\GenerateDefaultDataCommand:
        arguments:
            [ '@App\Utils\DataGenerator\FakerDataGenerator', '@App\Utils\DataGenerator\DataGeneratorFactory' ]

    App\Utils\DataGenerator\FakerDataGenerator:
        bind:
            $limit: 100

    App\Listeners\UserListener:
        tags:
            -
                name: doctrine.orm.entity_listener
                event: prePersist
                entity: App\Entity\User
                lazy: true

    App\Listeners\BlogPostListener:
        tags:
            -
                name: doctrine.orm.entity_listener
                event: prePersist
                entity: App\Entity\BlogPost
                lazy: true

    App\Listeners\ApiAuthenticationSuccessListener:
        tags:
            -
                name: kernel.event_listener
                event: lexik_jwt_authentication.on_authentication_success
                method: onAuthenticationSuccess

    App\Listeners\LogoutListener:
        tags:
            - name:  kernel.event_listener
              event: Symfony\Component\Security\Http\Event\LogoutEvent
              dispatcher: security.event_dispatcher.secured
              method: onLogoutSuccess

    App\Application\BlogPost\SearchLastBlogPosts:
        arguments: [ '@App\Infrastructure\Persistence\Doctrine\BlogPost\BlogPostRepository' ]

    App\Application\BlogPost\FindBlogPost:
        arguments: [ '@App\Infrastructure\Persistence\Doctrine\BlogPost\BlogPostRepository' ]

    App\Application\User\CreateUser:
        arguments: [ '@App\Infrastructure\Persistence\Doctrine\User\UserRepository' ]
